# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: dmtrd07
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: movie-open-api

service: movie-open-service

provider:
 name: aws
 runtime: python3.10
 region: us-east-1
 memorySize: 128
 environment:
  FLASK_ENV: Stg
  DATABASE_URL: !Sub 'postgres://${ssm:/topicDb/DB_USERNAME}:${ssm:/topicDb/DB_PASSWORD}@${MyDBInstance.Endpoint.Address}:5432/topicDB' 
plugins:
  - serverless-wsgi
  - serverless-python-requirements

package:
  exclude:
    - node_modules/**
    - venv/**
    - .git/**
    - .idea/**
    - app/tests/**
    - __pycache__/**

custom:
  wsgi:
    app: app/api.app
    packRequirements: false
  rdsEndpoint:
    Fn::GetAtt:
      - MyDBInstance
      - Endpoint.Address
functions:
 app:
   handler: wsgi_handler.handler
   events:
     - http: ANY /
     - http: 'ANY {proxy+}'
 migrate: 
   handler: migration_handler.run_migrations
   layers:
     - arn:aws:lambda:us-east-1:058264328211:layer:flask-layer:1
   events:
     - http:
         path: migrate
         method: post 
resources:
  Resources:
    # VPC
    MyVPC:
      Type: AWS::EC2::VPC
      Properties:
        CidrBlock: 10.0.0.0/16
        EnableDnsSupport: true
        EnableDnsHostnames: true
        Tags:
          - Key: Name
            Value: my-vpc

    # Subnet
    MySubnetA:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.1.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [0, !GetAZs us-east-1]
    MySubnetB:
      Type: AWS::EC2::Subnet
      Properties:
        VpcId: !Ref MyVPC
        CidrBlock: 10.0.2.0/24
        MapPublicIpOnLaunch: true
        AvailabilityZone: !Select [1, !GetAZs us-east-1]
    # Internet Gateway
    MyInternetGateway:
      Type: AWS::EC2::InternetGateway

    MyVPCGatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MyVPC
        InternetGatewayId: !Ref MyInternetGateway

    # Route Table
    MyRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVPC

    MyRoute:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: !Ref MyRouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId: !Ref MyInternetGateway

    MySubnetRouteTableAssociationA:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref MySubnetA
        RouteTableId: !Ref MyRouteTable
    MySubnetRouteTableAssociationB:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref MySubnetB
        RouteTableId: !Ref MyRouteTable

    # Security Group
    MySecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for RDS instance
        VpcId: !Ref MyVPC
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: 5432
            ToPort: 5432
            CidrIp: 0.0.0.0/0
    # DB Subnet Group
    MyDBSubnetGroup:
      Type: AWS::RDS::DBSubnetGroup
      Properties:
        DBSubnetGroupDescription: Subnet group for RDS instance
        SubnetIds:
          - !Ref MySubnetA
          - !Ref MySubnetB
    MyDBInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        DBInstanceIdentifier: topicDB
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        Engine: postgres
        EngineVersion: 14.11
        MasterUsername: !Sub ${ssm:/topicDb/DB_USERNAME}
        MasterUserPassword: !Sub ${ssm:/topicDb/DB_PASSWORD}
        DBName: topicDB
        VPCSecurityGroups:
          - !GetAtt MySecurityGroup.GroupId
        PubliclyAccessible: true
        DBSubnetGroupName: !Ref MyDBSubnetGroup  
  Outputs:
    VPCId:
      Value: !Ref MyVPC
    SubnetIdA:
      Value: !Ref MySubnetA
    SubnetIdB:
      Value: !Ref MySubnetB
    DBInstanceIdentifier:
      Value: !Ref MyDBInstance